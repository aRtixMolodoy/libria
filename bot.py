# bot.py

import os
import subprocess
import sys
import math
import telebot
from telebot import types
import logging
from datetime import datetime
from crud import (
    create_user,
    promote_to_admin,
    get_or_create_author,
    get_or_create_genre,
    get_or_create_catalog,
    create_or_update_order,
    get_book_by_id
)
from models import *
from config import SessionLocal, API_TOKEN, ADMIN_CHAT_IDS, GOOGLE_DRIVE_FOLDER_ID, OAUTH_TOKEN
from decorators import admin_only
from export_data import export_data  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é export_data
from scraper import scrape_books
import threading

# –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥-—Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
with open('bot.log', 'w') as log_file:
    pass

bot = telebot.TeleBot(API_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    filename='bot.log',
    format='%(asctime)s - %(levelname)s - %(message)s'
)


# –í–∞–ª–∏–¥–∞—Ü–∏—è email
def is_valid_email(email):
    import re
    regex = r'^\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
    return re.match(regex, email)


# –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def is_valid_phone(phone):
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 10 —Ü–∏—Ñ—Ä
    return phone.isdigit() and len(phone) == 10


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_view_books = types.KeyboardButton("üìö –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–Ω–∏–≥")
    btn_view_cart = types.KeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞")
    btn_checkout = types.KeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
    btn_search_category = types.KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    btn_help = types.KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    markup.add(btn_view_books, btn_view_cart)
    markup.add(btn_checkout)
    markup.add(btn_search_category)
    markup.add(btn_help)
    return markup


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
def admin_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_add_user = types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    btn_promote_user = types.KeyboardButton("‚¨ÜÔ∏è –ü–æ–≤—ã—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    btn_view_books = types.KeyboardButton("üìö –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–Ω–∏–≥")
    btn_view_cart = types.KeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞")
    btn_export_excel = types.KeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
    btn_export_csv = types.KeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV")
    btn_force_backup = types.KeyboardButton("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –±—ç–∫–∞–ø")
    btn_scrape = types.KeyboardButton("üîÑ –ü–∞—Ä—Å–∏—Ç—å –∫–Ω–∏–≥–∏")
    btn_search_category = types.KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    btn_help = types.KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    markup.add(btn_add_user, btn_promote_user)
    markup.add(btn_view_books, btn_view_cart)
    markup.add(btn_export_excel, btn_export_csv)
    markup.add(btn_force_backup, btn_scrape)
    markup.add(btn_search_category)
    markup.add(btn_help)
    return markup


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def cmd_start(message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    db = SessionLocal()
    user = db.query(User).filter(User.idTelegram == message.from_user.id).first()

    if not user:
        bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –ü–æ—Ö–æ–∂–µ, —Ç—ã –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.")
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        bot.register_next_step_handler(msg, process_first_name)
    else:
        greeting = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ."
        if user.role == 'admin':
            bot.reply_to(message, greeting, reply_markup=admin_menu())
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.idTelegram} –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        else:
            bot.reply_to(message, greeting, reply_markup=main_menu())
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.idTelegram} –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")
    db.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def process_first_name(message):
    user_id = message.from_user.id
    first_name = message.text.strip()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–º—è: {first_name} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    if not first_name:
        bot.send_message(message.chat.id, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        bot.register_next_step_handler(message, process_first_name)
        return
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    bot.register_next_step_handler(msg, lambda m: process_last_name(m, user_id, first_name))


def process_last_name(message, user_id, first_name):
    last_name = message.text.strip()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ñ–∞–º–∏–ª–∏—è: {last_name} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    if not last_name:
        bot.send_message(message.chat.id, "–§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
        bot.register_next_step_handler(message, lambda m: process_last_name(m, user_id, first_name))
        return
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É:")
    bot.register_next_step_handler(msg, lambda m: process_email(m, user_id, first_name, last_name))


def process_email(message, user_id, first_name, last_name):
    email = message.text.strip()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω email: {email} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    if not is_valid_email(email):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email:")
        bot.register_next_step_handler(message, lambda m: process_email(m, user_id, first_name, last_name))
        return
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (10 —Ü–∏—Ñ—Ä):")
    bot.register_next_step_handler(msg, lambda m: process_phone(m, user_id, first_name, last_name, email))


def process_phone(message, user_id, first_name, last_name, email):
    phone = message.text.strip()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω: {phone} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    if not is_valid_phone(phone):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (10 —Ü–∏—Ñ—Ä):")
        bot.register_next_step_handler(message, lambda m: process_phone(m, user_id, first_name, last_name, email))
        return
    db = SessionLocal()
    try:
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ ADMIN_CHAT_IDS
        role = 'admin' if user_id in ADMIN_CHAT_IDS else 'user'

        # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID
        new_user = create_user(db, first_name, last_name, email, phone, role=role, telegram_id=user_id)
        if role == 'admin':
            welcome_message = f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name} {last_name}! –í—ã —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
        else:
            welcome_message = f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name} {last_name}!"
        bot.reply_to(message, welcome_message, reply_markup=admin_menu() if role == 'admin' else main_menu())
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} {last_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å Telegram ID {user_id} –∏ —Ä–æ–ª—å—é {role}")
    except Exception as e:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}"
        if len(error_message) > 200:
            error_message = error_message[:200] + "..."
        bot.reply_to(message, error_message)
        logging.error(f"Error during user registration: {e}")
    finally:
        db.close()


def initiate_backup(message):
    admin_user = message.from_user
    admin_id = admin_user.id
    admin_name = f"{admin_user.first_name} {admin_user.last_name}" if admin_user.last_name else admin_user.first_name
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id} ({admin_name})")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É –æ –Ω–∞—á–∞–ª–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    bot.send_message(message.chat.id, "–ù–∞—á–∏–Ω–∞—é —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É —Å–∫—Ä–∏–ø—Ç—É —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        backup_script_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "backup_script.py")

        if not os.path.exists(backup_script_path):
            bot.send_message(message.chat.id, f"–°–∫—Ä–∏–ø—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {backup_script_path}")
            logging.error(f"Backup script not found at: {backup_script_path}")
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª Python
        python_executable = sys.executable  # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–≥–æ –∂–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞

        # –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–µ—Ä–µ–¥–∞—á–µ–π chat_id
        logging.info(f"–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {backup_script_path}")
        result = subprocess.run(
            [python_executable, backup_script_path, str(message.chat.id)],
            capture_output=True,
            text=True,
            check=True
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ —Å–∫—Ä–∏–ø—Ç–∞, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        output = result.stdout.strip() if result.stdout else "–ù–µ—Ç –≤—ã–≤–æ–¥–∞."
        logging.info(f"Backup initiated by admin {admin_id} ({admin_name}) succeeded with output: {output}")

    except subprocess.CalledProcessError as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: {e.stderr if e.stderr else '–ù–µ—Ç –æ—à–∏–±–∫–∏.'}"
        bot.send_message(message.chat.id, error_message)
        logging.error(f"Backup initiated by admin {admin_id} ({admin_name}) failed: {e.stderr}")
    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        bot.send_message(message.chat.id, error_message)
        logging.error(f"Backup initiated by admin {admin_id} ({admin_name}) encountered an unexpected error: {str(e)}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /goto
@bot.message_handler(commands=['goto'])
def cmd_goto(message):
    args = message.text.split()
    if len(args) != 2:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /goto <–Ω–æ–º–µ—Ä_—Å—Ç—Ä–∞–Ω–∏—Ü—ã>")
        return
    try:
        page = int(args[1])
        if page < 1:
            raise ValueError
    except ValueError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –±–æ–ª—å—à–µ–µ 0).")
        return

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}")
    show_books(message, page)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.message_handler(func=lambda message: is_catalog_exists(message.text))
def handle_category_selection(message):
    category_name = message.text
    logging.info(f"–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: '{category_name}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")

    if category_name == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())
        return

    db = SessionLocal()
    catalog = db.query(Catalog).filter(Catalog.catalog_name.ilike(category_name.strip())).first()
    db.close()

    if not catalog:
        bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.",
                         reply_markup=main_menu())
        logging.warning(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    logging.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞: '{catalog.catalog_name}' (ID: {catalog.id})")
    show_books(message, page=1, catalog_id=catalog.id)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{catalog.catalog_name}' –¥–ª—è –ø–æ–∏—Å–∫–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda message: True)
def handle_buttons(message):
    db = SessionLocal()
    user = db.query(User).filter(User.idTelegram == message.from_user.id).first()
    db.close()

    if message.text == "üìö –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–Ω–∏–≥":
        show_books(message, page=1)
    elif message.text == "üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
        show_categories(message)
    elif message.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞":
        show_cart(message)
    elif message.text == "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑":
        checkout(message)
    elif message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        show_help(message)
    elif message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" and user and user.role == 'admin':
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        bot.register_next_step_handler(message, process_new_user_first_name)
    elif message.text == "‚¨ÜÔ∏è –ü–æ–≤—ã—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" and user and user.role == 'admin':
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–≤—ã—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, process_promote_user)
    elif message.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel" and user and user.role == 'admin':
        export_data(bot, message, export_format='excel', initiated_by=user)
    elif message.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV" and user and user.role == 'admin':
        export_data(bot, message, export_format='csv', initiated_by=user)
    elif message.text == "üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –±—ç–∫–∞–ø" and user and user.role == 'admin':
        # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        initiate_backup(message)
    elif message.text == "üîÑ –ü–∞—Ä—Å–∏—Ç—å –∫–Ω–∏–≥–∏" and user and user.role == 'admin':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /scrape
        bot.send_message(message.chat.id, "–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –∫–Ω–∏–≥...", reply_markup=admin_menu())
        cmd_scrape(message)
    elif message.text == "üîô –ù–∞–∑–∞–¥":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        if user and user.role == 'admin':
            bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=admin_menu())
        else:
            bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())
    else:
        bot.reply_to(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", reply_markup=main_menu())


def show_categories(message):
    db = SessionLocal()
    catalogs = db.query(Catalog).order_by(Catalog.catalog_name).all()
    db.close()

    if not catalogs:
        bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=main_menu())
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for catalog in catalogs:
        markup.add(catalog.catalog_name)
    markup.add("üîô –ù–∞–∑–∞–¥")

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")


def is_catalog_exists(name: str) -> bool:
    db = SessionLocal()
    name_clean = name.strip()
    catalog = db.query(Catalog).filter(Catalog.catalog_name.ilike(name_clean)).first()
    db.close()
    exists = bool(catalog)
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{name_clean}': {'–Ω–∞–π–¥–µ–Ω–∞' if exists else '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}")
    return exists


def show_books(message, page=1, catalog_id=None, user_id=None):
    try:
        BOOKS_PER_PAGE = 6
        db = SessionLocal()
        if user_id is None:
            user_id = message.from_user.id
        logging.info(f"show_books called for user ID: {user_id}, page: {page}, catalog_id: {catalog_id}")

        user = db.query(User).filter(User.idTelegram == user_id).first()
        if not user:
            logging.warning(f"User with Telegram ID {user_id} not found.")
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.",
                             reply_markup=main_menu())
            db.close()
            return
        else:
            logging.info(f"User found: {user.first_name} {user.last_name}")

        query = db.query(Book).order_by(Book.id)

        if catalog_id:
            query = query.filter(Book.catalog_id == catalog_id)
            logging.info(f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–Ω–∏–≥ –ø–æ catalog_id: {catalog_id}")

        total_books = query.count()
        logging.info(f"Total books: {total_books}, requested page: {page}")

        if total_books == 0:
            if catalog_id:
                bot.send_message(message.chat.id, "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–Ω–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                                 reply_markup=main_menu())
            else:
                bot.send_message(message.chat.id, "–ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                                 reply_markup=admin_menu() if user.role == 'admin' else main_menu())
            logging.info("No books found.")
            db.close()
            return

        total_pages = math.ceil(total_books / BOOKS_PER_PAGE)

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page < 1:
            page = 1
        elif page > total_pages:
            page = total_pages

        offset_value = (page - 1) * BOOKS_PER_PAGE

        books_on_page = query.offset(offset_value).limit(BOOKS_PER_PAGE).all()

        if books_on_page:
            for book in books_on_page:
                books_text = (
                    f"üìñ *{book.title}*\n"
                    f"üë§ –ê–≤—Ç–æ—Ä: {book.author.name}\n"
                    f"üìö –ñ–∞–Ω—Ä: {book.genre.name}\n"
                    f"üìÇ –ö–∞—Ç–∞–ª–æ–≥: {book.catalog.catalog_name}\n"
                    f"üí≤ –¶–µ–Ω–∞: {book.price} —Ä—É–±.\n\n"
                )
                markup = book_inline_buttons(book.id)
                bot.send_message(
                    message.chat.id,
                    books_text,
                    parse_mode='Markdown',
                    reply_markup=markup
                )
                logging.info(f"Sent info for book '{book.title}' with add-to-cart button.")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            pagination_text = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}."
            pagination_markup = create_pagination_keyboard(page, total_pages, catalog_id)
            bot.send_message(
                message.chat.id,
                pagination_text,
                parse_mode='Markdown',
                reply_markup=pagination_markup
            )
            logging.info(f"Sent pagination for page {page}")
        else:
            if catalog_id:
                bot.send_message(message.chat.id, "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–Ω–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                                 reply_markup=main_menu())
            else:
                bot.send_message(message.chat.id, "–ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                                 reply_markup=admin_menu() if user.role == 'admin' else main_menu())
            logging.info(f"No books found on page {page}")

    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–Ω–∏–≥: {str(e)}"
        if len(error_message) > 200:
            error_message = error_message[:200] + "..."
        bot.reply_to(message, error_message)
        logging.error(f"Error in show_books: {e}")
    finally:
        db.close()


def create_pagination_keyboard(current_page, total_pages, catalog_id=None):
    markup = types.InlineKeyboardMarkup()
    buttons = []

    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
    if current_page > 1:
        if catalog_id:
            buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
                                                      callback_data=f"page:{current_page - 1}:catalog:{catalog_id}"))
        else:
            buttons.append(types.InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"page:{current_page - 1}"))

    # –ö–Ω–æ–ø–∫–∏ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü (–º–∞–∫—Å–∏–º—É–º 5 —Ä—è–¥–æ–º)
    start_page = max(1, current_page - 2)
    end_page = min(total_pages, current_page + 2)

    for page in range(start_page, end_page + 1):
        if page == current_page:
            buttons.append(types.InlineKeyboardButton(f"üìÑ {page}", callback_data="current"))
        else:
            if catalog_id:
                buttons.append(types.InlineKeyboardButton(str(page), callback_data=f"page:{page}:catalog:{catalog_id}"))
            else:
                buttons.append(types.InlineKeyboardButton(str(page), callback_data=f"page:{page}"))

    # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è"
    if current_page < total_pages:
        if catalog_id:
            buttons.append(types.InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è",
                                                      callback_data=f"page:{current_page + 1}:catalog:{catalog_id}"))
        else:
            buttons.append(types.InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"page:{current_page + 1}"))

    markup.add(*buttons)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    btn_jump = types.InlineKeyboardButton("üî¢ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ", callback_data="jump_page")
    markup.add(btn_jump)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–ª—è –≤—Å–µ—Ö
    btn_back = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")
    markup.add(btn_back)

    return markup


def book_inline_buttons(book_id):
    markup = types.InlineKeyboardMarkup()
    btn_add_to_cart = types.InlineKeyboardButton("üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart:{book_id}")
    markup.add(btn_add_to_cart)
    return markup


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.data.startswith("page:") or call.data == "current":
        handle_pagination(call)
    elif call.data == "jump_page":
        handle_jump_page(call)
    elif call.data.startswith("add_to_cart:"):
        handle_add_to_cart(call)
    elif call.data == "back_main":
        handle_back_main(call)
    else:
        bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {call.data}")


def handle_pagination(call):
    if call.data == "current":
        # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
        return

    try:
        parts = call.data.split(":")
        if len(parts) == 2:
            _, page_str = parts
            catalog_id = None
        elif len(parts) == 4 and parts[2] == "catalog":
            _, page_str, _, catalog_id_str = parts
            catalog_id = int(catalog_id_str)
        else:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data.")

        page = int(page_str)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –ø–µ—Ä–µ—à—ë–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {catalog_id}")

    except (IndexError, ValueError) as e:
        bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
        logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {call.data}, –æ—à–∏–±–∫–∞: {e}")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–∏–≥–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π catalog_id
    show_books(call.message, page, catalog_id=catalog_id, user_id=call.from_user.id)

    bot.answer_callback_query(call.id)


def handle_jump_page(call):
    user_id = call.from_user.id
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞:")
    bot.register_next_step_handler(msg, lambda m: process_jump_page(m, user_id))
    bot.answer_callback_query(call.id)


def process_jump_page(message, user_id):
    try:
        page = int(message.text.strip())
        if page < 1:
            raise ValueError
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –±–æ–ª—å—à–µ–µ 0).")
        return

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}")
    show_books(message, page, user_id=user_id)


def handle_add_to_cart(call):
    try:
        book_id = int(call.data.split(":")[1])
        db = SessionLocal()
        book = db.query(Book).filter(Book.id == book_id).first()
        user = db.query(User).filter(User.idTelegram == call.from_user.id).first()
        if not user:
            bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {call.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É.")
            db.close()
            return
        if not book:
            bot.answer_callback_query(call.id, "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            logging.warning(f"–ö–Ω–∏–≥–∞ —Å ID {book_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É.")
            db.close()
            return
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É –≤ –∑–∞–∫–∞–∑ (–∫–æ—Ä–∑–∏–Ω—É) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º User.id
        create_or_update_order(db, user_id=user.id, book_id=book.id, quantity=1, price_at_time_of_order=book.price)
        bot.answer_callback_query(call.id, f"–ö–Ω–∏–≥–∞ '{book.title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.idTelegram} –¥–æ–±–∞–≤–∏–ª –∫–Ω–∏–≥—É '{book.title}' –≤ –∫–æ—Ä–∑–∏–Ω—É.")
        db.close()
    except Exception as e:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        if len(error_message) > 200:
            error_message = error_message[:200] + "..."
        bot.answer_callback_query(call.id, error_message)
        logging.error(f"Error adding to cart: {e}")


def handle_back_main(call):
    db = SessionLocal()
    user = db.query(User).filter(User.idTelegram == call.from_user.id).first()
    db.close()
    if user:
        if user.role == 'admin':
            bot.send_message(call.message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=admin_menu())
        else:
            bot.send_message(call.message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())
    else:
        bot.send_message(call.message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu())
    bot.answer_callback_query(call.id)


def show_cart(message):
    try:
        db = SessionLocal()
        user = db.query(User).filter(User.idTelegram == message.from_user.id).first()
        if not user:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu())
            db.close()
            return

        order = db.query(Order).filter(Order.user_id == user.id, Order.status == 'active').first()
        if not order or not order.order_items:
            bot.send_message(message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=main_menu())
            db.close()
            return

        messages = []
        total = 0.0
        for item in order.order_items:
            book = db.query(Book).filter(Book.id == item.book_id).first()
            if book:
                message_text = (
                    f"üìñ *{book.title}*\n"
                    f"üë§ –ê–≤—Ç–æ—Ä: {book.author.name}\n"
                    f"üìö –ñ–∞–Ω—Ä: {book.genre.name}\n"
                    f"üìÇ –ö–∞—Ç–∞–ª–æ–≥: {book.catalog.catalog_name}\n"
                    f"üõí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}\n\n"
                )
                messages.append(message_text)
                total += item.price_at_time_of_order * item.quantity  # –û—Å—Ç–∞–≤–ª—è–µ–º —Å—É–º–º—É –¥–ª—è –æ–±—â–µ–≥–æ –∏—Ç–æ–≥–∞

        if messages:
            for msg_text in messages:
                bot.send_message(
                    message.chat.id,
                    msg_text,
                    parse_mode='Markdown'
                )
            cart_summary = f"üí∞ *–ò—Ç–æ–≥–æ:* {total} —Ä—É–±."
            markup = create_cart_keyboard()
            bot.send_message(
                message.chat.id,
                cart_summary,
                parse_mode='Markdown',
                reply_markup=markup
            )
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.idTelegram} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∫–æ—Ä–∑–∏–Ω—É, —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total} —Ä—É–±.")
        else:
            bot.send_message(message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=main_menu())
            logging.info(f"–ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.idTelegram}")
        db.close()
    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã: {str(e)}"
        if len(error_message) > 200:
            error_message = error_message[:200] + "..."
        bot.reply_to(message, error_message)
        logging.error(f"Error in show_cart: {e}")


def create_cart_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_checkout = types.KeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
    btn_back = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
    markup.add(btn_checkout)
    markup.add(btn_back)
    return markup


def checkout(message):
    try:
        db = SessionLocal()
        user = db.query(User).filter(User.idTelegram == message.from_user.id).first()

        if not user:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.",
                             reply_markup=main_menu())
            db.close()
            return

        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        order = db.query(Order).filter(Order.user_id == user.id, Order.status == 'active').first()

        if not order or not order.order_items:
            bot.send_message(message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.",
                             reply_markup=main_menu())
            db.close()
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
        total_price = sum(item.price_at_time_of_order * item.quantity for item in order.order_items)
        order.total_price = total_price

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ 'completed'
        order.status = 'completed'
        order.order_date = datetime.utcnow()

        db.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(message.chat.id,
                         f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑!\n–û–±—â–∞—è —Å—É–º–º–∞: {total_price} —Ä—É–±.\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
                         reply_markup=main_menu())
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.idTelegram} –æ—Ñ–æ—Ä–º–∏–ª –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É {total_price} —Ä—É–±.")

    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}"
        if len(error_message) > 200:
            error_message = error_message[:200] + "..."
        bot.reply_to(message, error_message)
        logging.error(f"Error in checkout: {e}")
    finally:
        db.close()


def show_help(message):
    help_text = """
*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
üìö *–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–Ω–∏–≥* - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥
üîç *–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏* - –ù–∞–π—Ç–∏ –∫–Ω–∏–≥–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
üõí *–ö–æ—Ä–∑–∏–Ω–∞* - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ—Ä–∑–∏–Ω–æ–π
‚úÖ *–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑* - –û—Ñ–æ—Ä–º–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
‚ÑπÔ∏è *–ü–æ–º–æ—â—å* - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

*–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚ûï *–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É
‚¨ÜÔ∏è *–ü–æ–≤—ã—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* - –ü–æ–≤—ã—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
üì§ *–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel* - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª Excel
üì§ *–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV* - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª CSV
üîÑ *–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –±—ç–∫–∞–ø* - –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
üîÑ *–ü–∞—Ä—Å–∏—Ç—å –∫–Ω–∏–≥–∏* - –ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –∫–Ω–∏–≥
üîô *–ù–∞–∑–∞–¥* - –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
"""
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown', reply_markup=main_menu())
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å.")


# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
def process_new_user_first_name(message):
    new_first_name = message.text.strip()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–º—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_first_name}")
    if not new_first_name:
        bot.send_message(message.chat.id, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        bot.register_next_step_handler(message, process_new_user_first_name)
        return
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    bot.register_next_step_handler(msg, lambda m: process_new_user_last_name(m, new_first_name))


def process_new_user_last_name(message, first_name):
    new_last_name = message.text.strip()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ñ–∞–º–∏–ª–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_last_name}")
    if not new_last_name:
        bot.send_message(message.chat.id,
                         "–§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        bot.register_next_step_handler(message, lambda m: process_new_user_last_name(m, first_name))
        return
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ email –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    bot.register_next_step_handler(msg, lambda m: process_new_user_email(m, first_name, new_last_name))


def process_new_user_email(message, first_name, last_name):
    email = message.text.strip()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω email –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {email}")
    if not is_valid_email(email):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email:")
        bot.register_next_step_handler(message, lambda m: process_new_user_email(m, first_name, last_name))
        return
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (10 —Ü–∏—Ñ—Ä):")
    bot.register_next_step_handler(msg, lambda m: process_new_user_phone(m, first_name, last_name, email))


def process_new_user_phone(message, first_name, last_name, email):
    phone = message.text.strip()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {phone}")
    if not is_valid_phone(phone):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (10 —Ü–∏—Ñ—Ä):")
        bot.register_next_step_handler(message, lambda m: process_new_user_phone(m, first_name, last_name, email))
        return
    msg = bot.send_message(message.chat.id,
                           "–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω), –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º:")
    bot.register_next_step_handler(msg, lambda m: process_new_user_telegram_id(m, first_name, last_name, email, phone))


def process_new_user_telegram_id(message, first_name, last_name, email, phone):
    telegram_id_text = message.text.strip()
    telegram_id = int(telegram_id_text) if telegram_id_text.isdigit() else None
    logging.info(f"–ü–æ–ª—É—á–µ–Ω Telegram ID –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {telegram_id_text}")

    if telegram_id_text and not telegram_id:
        bot.send_message(message.chat.id,
                         "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram ID.")
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π Telegram ID: {telegram_id_text}")

    if telegram_id:
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ä–æ–ª—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (user/admin):")
        bot.register_next_step_handler(msg, lambda m: process_new_user_role(m, first_name, last_name, email, phone,
                                                                            telegram_id))
    else:
        # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID=None –∏ —Ä–æ–ª—å—é 'user'
        db = SessionLocal()
        try:
            new_user = create_user(db, first_name, last_name, email, phone, role="user", telegram_id=None)
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} {last_name} –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ä–æ–ª—å—é 'user'.",
                         reply_markup=admin_menu())
            logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} {last_name} —Å —Ä–æ–ª—å—é 'user' –±–µ–∑ Telegram ID.")
        except Exception as e:
            error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}"
            if len(error_message) > 200:
                error_message = error_message[:200] + "..."
            bot.reply_to(message, error_message, reply_markup=admin_menu())
            logging.error(f"Error adding user: {e}")
        finally:
            db.close()


def process_new_user_role(message, first_name, last_name, email, phone, telegram_id):
    role = message.text.lower()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ä–æ–ª—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {role}")
    if role not in ['user', 'admin']:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Å —Ä–æ–ª—å—é 'user'.")
        role = 'user'
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å: {role}. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–æ–ª—å 'user'.")
    db = SessionLocal()
    try:
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é
        new_user = create_user(db, first_name, last_name, email, phone, role=role, telegram_id=telegram_id)
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} {last_name} –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ä–æ–ª—å—é '{role}'.",
                     reply_markup=admin_menu())
        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} {last_name} —Å —Ä–æ–ª—å—é '{role}' –∏ Telegram ID {telegram_id}.")
    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}"
        if len(error_message) > 200:
            error_message = error_message[:200] + "..."
        bot.reply_to(message, error_message, reply_markup=admin_menu())
        logging.error(f"Error adding user: {e}")
    finally:
        db.close()


def process_promote_user(message):
    try:
        user_id = int(message.text.strip())
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—ã—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}")
        db = SessionLocal()
        user = promote_to_admin(db, user_id)
        db.close()
        if user:
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} {user.last_name} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.",
                         reply_markup=admin_menu())
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} {user.last_name} –ø–æ–≤—ã—à–µ–Ω –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        else:
            bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=admin_menu())
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–≤—ã—à–µ–Ω–∏—è.")
    except ValueError:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=admin_menu())
        logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id: {message.text.strip()}")
    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}"
        if len(error_message) > 200:
            error_message = error_message[:200] + "..."
        bot.reply_to(message, error_message, reply_markup=admin_menu())
        logging.error(f"Error promoting user: {e}")


@bot.message_handler(commands=['scrape'])
@admin_only(bot)
def cmd_scrape(message):
    admin_user = message.from_user
    admin_id = admin_user.id
    admin_name = f"{admin_user.first_name} {admin_user.last_name}" if admin_user.last_name else admin_user.first_name
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /scrape –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id} ({admin_name})")

    def run_scrape():
        try:
            logging.info("–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ scrape_books()")
            scrape_books()
            scrape_success_message = (
                f"–°–∫—Ä–∞–ø–∏–Ω–≥ –∫–Ω–∏–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.\n"
                f"–í—ã–ø–æ–ª–Ω–∏–ª: {admin_name} (ID: {admin_id})\n"
                f"–í—Ä–µ–º—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC"
            )
            for admin_chat_id in ADMIN_CHAT_IDS:
                bot.send_message(admin_chat_id, scrape_success_message)
            logging.info(f"–°–∫—Ä–∞–ø–∏–Ω–≥ –∫–Ω–∏–≥ –∑–∞–≤–µ—Ä—à—ë–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ –∞–¥–º–∏–Ω–∞ {admin_id} ({admin_name}).")
        except Exception as e:
            error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ –∫–Ω–∏–≥: {str(e)}"
            if len(error_message) > 200:
                error_message = error_message[:200] + "..."
            for admin_chat_id in ADMIN_CHAT_IDS:
                bot.send_message(admin_chat_id, error_message)
            logging.error(f"Error during scraping: {e}")

    threading.Thread(target=run_scrape).start()
    bot.send_message(message.chat.id, "–ù–∞—á–∏–Ω–∞—é —Å–∫—Ä–∞–ø–∏–Ω–≥ –∫–Ω–∏–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    logging.info(f"–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –∫–Ω–∏–≥ –ø–æ –∫–æ–º–∞–Ω–¥–µ –∞–¥–º–∏–Ω–∞ {admin_id} ({admin_name})")


def handle_pagination(call):
    if call.data == "current":
        # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
        return

    try:
        parts = call.data.split(":")
        if len(parts) == 2:
            _, page_str = parts
            catalog_id = None
        elif len(parts) == 4 and parts[2] == "catalog":
            _, page_str, _, catalog_id_str = parts
            catalog_id = int(catalog_id_str)
        else:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data.")

        page = int(page_str)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –ø–µ—Ä–µ—à—ë–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {catalog_id}")

    except (IndexError, ValueError) as e:
        bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
        logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {call.data}, –æ—à–∏–±–∫–∞: {e}")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–∏–≥–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π catalog_id
    show_books(call.message, page, catalog_id=catalog_id, user_id=call.from_user.id)

    bot.answer_callback_query(call.id)


def process_jump_page(message, user_id):
    try:
        page = int(message.text.strip())
        if page < 1:
            raise ValueError
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –±–æ–ª—å—à–µ–µ 0).")
        return

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}")
    show_books(message, page, user_id=user_id)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞.")
    bot.polling(none_stop=True)
